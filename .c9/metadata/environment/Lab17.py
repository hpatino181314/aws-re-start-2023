{"changed":true,"filter":false,"title":"Lab17.py","tooltip":"/Lab17.py","value":"print(\"AWS Re-Start: Lab-17\")\n\n# Module Lab: Caesar Cipher Program Bug #1\n#\n# In a previous lab, you created a Caesar cipher program. This version of\n# the program is buggy. Use a debugger to find the bug and fix it.\n\n# Double the given alphabet\ndef getDoubleAlphabet(alphabet):\n    doubleAlphabet = alphabet + alphabet\n    return doubleAlphabet\n\n# Get a message to encrypt\ndef getMessage():\n    stringToEncrypt = input(\"Please enter a message to encrypt: \")\n    return stringToEncrypt\n\n# Get a cipher key\ndef getCipherKey():\n    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")\n    return shiftAmount\n\n# Encrypt message\ndef encryptMessage(message, cipherKey, alphabet):\n    encryptedMessage = \"\"\n    uppercaseMessage = \"\"\n    uppercaseMessage = message.upper()\n    for currentCharacter in uppercaseMessage:\n        position = alphabet.find(currentCharacter)\n        newPosition = position + int(cipherKey)\n        if currentCharacter in alphabet:\n            encryptedMessage = encryptedMessage + alphabet[newPosition]\n        else:\n            encryptedMessage = encryptedMessage + currentCharacter\n    return encryptedMessage\n\n# Decrypt message\ndef decryptMessage(message, cipherKey, alphabet):\n    decryptKey = -1 * int(cipherKey)\n    return encryptMessage(message, decryptKey, alphabet)\n\n\n# Main program logic\ndef runCaesarCipherProgram():\n    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    print(f'Alphabet: {myAlphabet}')\n    myAlphabet2 = getDoubleAlphabet(myAlphabet)\n    print(f'Alphabet2: {myAlphabet2}')\n    myMessage = getMessage()\n    print(myMessage)\n    myCipherKey = getCipherKey()\n    print(myCipherKey)\n    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)\n    print(f'Encrypted Message: {myEncryptedMessage}')\n    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)\n    print(f'Decrypted Message: {myDecryptedMessage}')\n    \n\n\n# Main logic\nrunCaesarCipherProgram()","undoManager":{"mark":13,"position":13,"stack":[[{"start":{"row":0,"column":0},"end":{"row":3,"column":0},"action":"remove","lines":["\"\"\"","Your module description","\"\"\"",""],"id":17},{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["print(\"AWS Re-Start: Lab-16\")",""]}],[{"start":{"row":0,"column":26},"end":{"row":0,"column":27},"action":"remove","lines":["6"],"id":18}],[{"start":{"row":0,"column":26},"end":{"row":0,"column":27},"action":"insert","lines":["7"],"id":19}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":20}],[{"start":{"row":2,"column":0},"end":{"row":57,"column":24},"action":"insert","lines":["# Module Lab: Caesar Cipher Program Bug #1","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + cipherKey","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"],"id":21}],[{"start":{"row":29,"column":33},"end":{"row":29,"column":34},"action":"insert","lines":["i"],"id":22},{"start":{"row":29,"column":34},"end":{"row":29,"column":35},"action":"insert","lines":["n"]},{"start":{"row":29,"column":35},"end":{"row":29,"column":36},"action":"insert","lines":["t"]},{"start":{"row":29,"column":36},"end":{"row":29,"column":37},"action":"insert","lines":["("]}],[{"start":{"row":29,"column":46},"end":{"row":29,"column":47},"action":"insert","lines":[")"],"id":23}],[{"start":{"row":39,"column":56},"end":{"row":40,"column":0},"action":"insert","lines":["",""],"id":24},{"start":{"row":40,"column":0},"end":{"row":40,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":40,"column":0},"end":{"row":40,"column":4},"action":"remove","lines":["    "],"id":25}],[{"start":{"row":40,"column":0},"end":{"row":41,"column":0},"action":"insert","lines":["",""],"id":26}],[{"start":{"row":41,"column":0},"end":{"row":43,"column":56},"action":"insert","lines":["def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)"],"id":27}],[{"start":{"row":41,"column":0},"end":{"row":43,"column":56},"action":"remove","lines":["def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)"],"id":28},{"start":{"row":40,"column":0},"end":{"row":41,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":55,"column":53},"end":{"row":56,"column":0},"action":"insert","lines":["",""],"id":29},{"start":{"row":56,"column":0},"end":{"row":56,"column":4},"action":"insert","lines":["    "]},{"start":{"row":56,"column":4},"end":{"row":57,"column":0},"action":"insert","lines":["",""]},{"start":{"row":57,"column":0},"end":{"row":57,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":57,"column":0},"end":{"row":57,"column":4},"action":"remove","lines":["    "],"id":30}],[{"start":{"row":57,"column":0},"end":{"row":59,"column":56},"action":"remove","lines":["def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)"],"id":31},{"start":{"row":57,"column":0},"end":{"row":69,"column":52},"action":"insert","lines":["def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decypted Message: {myDecryptedMessage}')"]}],[{"start":{"row":57,"column":0},"end":{"row":59,"column":56},"action":"insert","lines":["def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)"],"id":32}]]},"ace":{"folds":[],"scrolltop":293.5,"scrollleft":0,"selection":{"start":{"row":34,"column":0},"end":{"row":34,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":19,"state":"start","mode":"ace/mode/python"}},"timestamp":1697240444421}